import json
from decimal import Decimal

import stripe

from django.conf import settings
from django.shortcuts import Http404
from django.shortcuts import render_to_response
from django.shortcuts import redirect

from rest_framework import status
from rest_framework.response import Response

from payments.models import Customer

from core.api import AuthenticatedView
from core.api import UnauthenticatedView
from core.constants import Constants
from users.models import Profile
from transactions.serializers import ChargeSerializer, CustomerSerializer

class CustomerList(AuthenticatedView):

    def get(self, request, format=None):
        '''
        List all customers in the database.

        TODO: For debugging. Need to remove before launch.
        '''
        customers = Customer.objects.all()
        serializer = CustomerSerializer(customers, many=True)
        return Response(serializer.data, status = status.HTTP_200_OK)


class ChargeCustomer(AuthenticatedView):
    '''
    Charge a registered user's stripe customer account.
    '''

    def post(self, request, format=None):
        '''
        Charge authenticated user's stripe account. Uses 'payments' customer.can_charge() to
        verify that the customer's credit card can be charged before making any payment.

        amount -- Amount to charge the customer. MUST BE A DECIMAL VALUE IN US DOLLARS
        description -- A description of the charge. Default should be 'username spent $amount at barname'
        '''
        try:
            customer = request.user.customer
        except Customer.DoesNotExist:
            raise Http404

        if customer.can_charge():
            try:
                receipt = customer.charge(
                    amount = Decimal(request.DATA['amount']),
                    description = request.DATA['description'],
                )
            except KeyError:
                return Response(
                    '{"detail":"Charging a customer requires a decimal amount in dollars and a description."}',
                    status = status.HTTP_400_BAD_REQUEST
                )
            return Response(
                ChargeSerializer(receipt).data,
                status=status.HTTP_200_OK
            )
        else:
            # If the customer does not have payment credential's. Redirect to update the card.
            redirect(
                '/customers/update/card/'
            )



class UpdateCustomerCard(AuthenticatedView):
    '''
    update the logged in customer's card information.
    '''

    def get(self, request, format=None):
        return render_to_response('stripe_test.html')

    def post(self, request, format=None):
        '''
        Update the logged in user's card with a new card token created by stripe.

        stripeToken -- Stripe card token generated by stripe's api.
        '''

        # TODO: update_card sends a signal to stripe that needs looking into.
        user = request.user
        try:
            customer = user.customer
            customer.update_card(request.DATA['stripeToken'])
        except Customer.DoesNotExist:
            return Response(
                '{"detail":"Logged in user does not have a customer associated with them."}',
                status = status.HTTP_404_NOT_FOUND
            )
        except KeyError:
            return Response(
                '{"detail":"{}"}'.format('Updating a customer credit card requires a stripeToken.'),
                status = status.HTTP_400_BAD_REQUEST
            )

        return redirect(
            '/customers/myprofile/'
        )

class MyCustomerProfile(AuthenticatedView):
    '''
    View your customer profile. Returns last 4 digits of CC, type of CC,
    the primary key of your user, and your recent charges.
    '''
    def get(self, request, format=None):
        try:
            customer = request.user.customer
        except Customer.DoesNotExist:
            return Response(
                '{"detail":"{}"}'.format('Customer does not exist.'),
                status = status.HTTP_404_NOT_FOUND
            )
        serializer = CustomerSerializer(customer)
        return Response(
            serializer.data,
            status = status.HTTP_200_OK
        )




# TODO: May not be necessary. Question: Can save the user's info by default?
# "We recommend that you keep your card on file. It will be safe because we only
# deal with strongly encrypted payment information, and keeping it is the only
# way to take full advantage of Drink Up."

# class OneTimeCharge(AuthenticatedView):
#     '''
#     Create a one time charge associated with a user.
#     '''
#
#     def post(self, request, format=None):
#         '''
#         Make a one time charge to a user's card without registering the card to the
#         user. On the client-side make sure to have the client verify the quantity and that
#         the value passed in the request has format $10.15 = 10.15  NOT 1015.
#
#         amount -- The decimal value in US dollars of the charge.
#         stripeToken -- The stripe token created via stripes API for the card information.
#         '''
#         user = request.user
#         try:
#             customer = user.customer
#         except Customer.DoesNotExist:
#             return Response(
#                 '{"detail":"{}"}'.format('Invalid Customer Account'),
#                 status = status.HTTP_404_NOT_FOUND
#             )
#
#         # Try to make the charge
#         try:
#             if request.Data.get('amount') and \
#                     isinstance(request.Data.get('amount'), Decimal):
#                 amount = request.Data.get('amount')
#             else:
#                 return Response(
#                     '{"detail":"{}"}'.format('Request must have a valid decimal "amount".'),
#                     status = status.HTTP_400_BAD_REQUEST
#                 )
#             charge = stripe.Charge.create(
#                 amount=
#             )







